const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

// Kh·ªüi t·∫°o bot v·ªõi token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
let bot = null;
try {
    // Ch·ªâ kh·ªüi t·∫°o bot n·∫øu c√≥ token
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (token) {
        bot = new TelegramBot(token, { polling: false });
    }
} catch (error) {
    console.error('L·ªói kh·ªüi t·∫°o Telegram Bot:', error.message);
}

/**
 * Ki·ªÉm tra k·∫øt n·ªëi Telegram Bot
 * @returns {Promise<Boolean>} - True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
 */
const checkTelegramConnection = async () => {
    try {
        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatId = process.env.TELEGRAM_CHAT_ID;

        if (!token || !chatId || !bot) {
            console.log('Telegram Bot ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.');
            return false;
        }

        // G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông server ƒë·∫øn Telegram
        await bot.sendMessage(chatId,
            `‚úÖ Server ƒë√£ kh·ªüi ƒë·ªông\nüïí Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`
        );
        console.log('ƒê√£ k·∫øt n·ªëi v·ªõi Telegram Bot th√†nh c√¥ng.');
        return true;
    } catch (error) {
        console.error('L·ªói k·∫øt n·ªëi Telegram Bot:', error.message);
        return false;
    }
};

/**
 * G·ª≠i th√¥ng b√°o c√¢u h·ªèi m·ªõi
 * @param {Object} question - C√¢u h·ªèi m·ªõi
 * @returns {Promise<Boolean>} - True n·∫øu g·ª≠i th√†nh c√¥ng
 */
const sendNewQuestionNotification = async (question) => {
    try {
        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatId = process.env.TELEGRAM_CHAT_ID;

        if (!token || !chatId || !bot) {
            return false;
        }

        const message = `
üîî <b>C√≥ c√¢u h·ªèi m·ªõi!</b>

üë§ <b>Ng∆∞·ªùi h·ªèi:</b> ${question.name || '·∫®n danh'}
üìù <b>N·ªôi dung:</b> ${question.content}
‚è∞ <b>Th·ªùi gian:</b> ${new Date(question.createdAt).toLocaleString('vi-VN')}
        `;

        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        return true;
    } catch (error) {
        console.error('L·ªói g·ª≠i th√¥ng b√°o c√¢u h·ªèi m·ªõi:', error.message);
        return false;
    }
};

/**
 * G·ª≠i th√¥ng b√°o c√¢u tr·∫£ l·ªùi m·ªõi
 * @param {Object} question - C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi
 * @returns {Promise<Boolean>} - True n·∫øu g·ª≠i th√†nh c√¥ng
 */
const sendNewAnswerNotification = async (question) => {
    try {
        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatId = process.env.TELEGRAM_CHAT_ID;

        if (!token || !chatId || !bot) {
            return false;
        }

        const message = `
üì£ <b>ƒê√£ tr·∫£ l·ªùi c√¢u h·ªèi!</b>

üë§ <b>Ng∆∞·ªùi h·ªèi:</b> ${question.name || '·∫®n danh'}
üìù <b>C√¢u h·ªèi:</b> ${question.content}
‚úÖ <b>Tr·∫£ l·ªùi:</b> ${question.answer}
‚è∞ <b>Th·ªùi gian:</b> ${new Date().toLocaleString('vi-VN')}
        `;

        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        return true;
    } catch (error) {
        console.error('L·ªói g·ª≠i th√¥ng b√°o c√¢u tr·∫£ l·ªùi m·ªõi:', error.message);
        return false;
    }
};

module.exports = {
    checkTelegramConnection,
    sendNewQuestionNotification,
    sendNewAnswerNotification
}; 